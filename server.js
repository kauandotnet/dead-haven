var express = require('express');
var app = express();
var server = require('http').Server(app);
var io = require('socket.io').listen(server);
var PF = require('pathfinding');

// All player objects
var players = {};
// Array of all bullets
var bullet_array = [];
// NPC Bullets
var npc_bullets = [];
// Array of all zombies
var zombie_array = [];
// Used for id of zombies
var zombieCount = 0;
// Array for all objects
var object_array = [];
// Maps
// Must convert maps to this: 0 = walkable / 1 = blocked
var map = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
// How we identify which group players are in
var groupIds = 0;
var players = {};
// NPC
var npc_array = [];
// Home Variables
// Coords of home locations X, Y, X, Y
var home_array = [100, 100, 500, 500];
// ID of placed objects and their locations
var home_objects = [];

app.use(express.static(__dirname + '/public'));
 
app.get('/', function (req, res)
{
  res.sendFile(__dirname + '/index.html');
});

io.on('connection', function (socket)
{
	//console.log('a user connected');

	socket.on('disconnect', function ()
	{
		console.log('user disconnected');
		// remove this player from our players object
		delete players[socket.id];
		// emit a message to all players to remove this player
		io.emit('disconnect', socket.id);
	});

	// When a player moves, update the player data
	socket.on('playerMovement', function(movementData)
	{
		try
		{
			players[socket.id].x = movementData.x;
			players[socket.id].y = movementData.y;
			players[socket.id].rotation = movementData.rotation;
			// emit a message to all players about the player that moved
			socket.broadcast.emit('playerMoved', players[socket.id]);
		}
		catch
		{
			// Do nothing
		}
	});
	
	// When a player moves, update the player data
	socket.on('chatMessage', function(chatV)
	{
		socket.emit('chatMessage', {chatV});
		socket.broadcast.emit('chatMessage', {chatV});
		console.log(chatV.id + "_" + chatV.chat);
	});

	// Player is requesting dialogue window
	socket.on('dialogue', function(data)
	{
		// Is the player within distance of the NPC?
		for(var i = 0; i < npc_array.length; i++)
		{
			var dx = players[socket.id].x - npc_array[i].x; 
			var dy = players[socket.id].y - npc_array[i].y;
			var dist = Math.sqrt(dx * dx + dy * dy);
			
			// Determine distance
			if(dist < 100 && npc_array[i].spriteid == data.id)
			{
				// Tell server the dialogue information
				socket.emit('receiveDialogue', { text: "Hello World", spriteid: npc_array[i].spriteid, type: 1 });
			}
		}
	});

	// When a player presses to pickup a item and data is received by the server
	socket.on('pickupItem', function(item)
	{
		// Prevents crashes
		try
		{
			// Prevent zombies from picking up items
			if(players[socket.id].isZombie > 0) return;

			var dx = players[socket.id].x - object_array[item.item].x; 
			var dy = players[socket.id].y - object_array[item.item].y;
			var dist = Math.sqrt(dx * dx + dy * dy);
				
			// Determine distance
			if(dist < 70)
			{
				// Tell the client to destroy the item
				socket.emit('destroyItem', {item});
				socket.broadcast.emit('destroyItem', {item});
				// Remove from array
				object_array.splice(item.item, 1);
				// Fix it
				fixObjectArray(item.item);
			}
		}
		catch
		{
			// Do nothing for now
		}
	});

	// When a player presses to buy a house and data is received by the server
	socket.on('buyHouse', function(item)
	{
		// Prevents crashes
		try
		{
			// Prevent zombies from picking up items
			if(players[socket.id].isZombie > 0) return;
			// Prevent a player who owns a home from buying another home
			if(players[socket.id].ownsHome > 0) return;

			// What's the home ID?
			var homeId = 0;
			var homeIdCount = 1;

			// Check if on house array
			for(var i = 0; i < home_array.length; i += 4)
			{
				if(players[socket.id].x > home_array[i] && players[socket.id].x < home_array[i + 2] && players[socket.id].y > home_array[i + 1] && players[socket.id].y < home_array[i + 3])
				{
					homeId = homeIdCount;
					homeIdCount++;
				}
			}

			// Does somebody own the home?
			var homeOwned = false;

			for(playerId in players)
			{
				if(players[playerId].ownsHome == homeId)
				{
					homeOwned = true;
				}
			}

			// Prevent duplicate home purchase
			if(!homeOwned)
			{
				// Set
				players[socket.id].ownsHome = homeId;
			}
		}
		catch
		{
			// Do nothing for now
		}
	});

	// When a player presses to buy a house and data is received by the server
	socket.on('buildObject', function(data)
	{
		// Prevents crashes
		try
		{
			// Prevent zombies from picking up items
			if(players[socket.id].isZombie > 0) return;
			// Prevent a player who owns a home from buying another home
			if(players[socket.id].ownsHome == 0) return;
			
			// What's the home ID?
			var homeId = 0;
			var homeIdCount = 1;
			// Can we place the object within the defined area?
			var canPlace = false;

			// Check if on house array
			for(var i = 0; i < home_array.length; i += 4)
			{
				// Check if the player owns the home
				if(players[socket.id].x > home_array[i] && players[socket.id].x < home_array[i + 2] && players[socket.id].y > home_array[i + 1] && players[socket.id].y < home_array[i + 3])
				{
					homeId = homeIdCount;
					homeIdCount++;
				}

				// Check if we can place the item in the defined area
				if(data.x > home_array[i] && data.x < home_array[i + 2] && data.y > home_array[i + 1] && data.y < home_array[i + 3])
				{
					canPlace = true;
				}
			}

			// Does the player own the home and can the item be placed?
			if(players[socket.id].ownsHome == homeId && canPlace)
			{
				// Push to array
				home_objects.push(data.object);
				home_objects.push(data.x);
				home_objects.push(data.y);

				var myObjects = {};
				myObjects.object = data.object;
				myObjects.x = data.x;
				myObjects.y = data.y;

				// Notify the client
				socket.emit('receiveObjects', {myObjects});
				socket.broadcast.emit('receiveObjects', {myObjects});
			}
		}
		catch
		{
			// Do nothing for now
		}
	});

	// Get mission details
	socket.on('getMission', function(data)
	{
		// Is the player within distance of the NPC?
		for(var i = 0; i < npc_array.length; i++)
		{
			var dx = players[socket.id].x - npc_array[i].x; 
			var dy = players[socket.id].y - npc_array[i].y;
			var dist = Math.sqrt(dx * dx + dy * dy);
			
			// Determine distance
			if(dist < 100 && npc_array[i].spriteid == data.spriteid)
			{
				// If on no mission, assign a mission...
				if(players[socket.id].missionId == 0)
				{
					players[socket.id].missionId = 1;
					players[socket.id].missionStatus = 1;
				}
			}
		}
	});

	// Get the last time the user was active
	socket.on('getLastActive', function(data)
	{
		// Save the data to the user
		players[socket.id].lastActive = data.lastActive;
		// Is the player moving?
		players[socket.id].isMoving = data.isMoving;
		// Is the player shooting?
		players[socket.id].isShooting = data.isShooting;

		// Check date
		var now = new Date().getTime();

		if(players[socket.id].lastActive < now - 5000)
		{
			socket.emit('force-disconnect', { id: players[socket.id] });
		}
	});

	// When a player receives a group invite
	socket.on('receiveGroupInv', function(playerInfo)
	{
		// Leave Group
		if(players[socket.id].inGroup > 0)
		{
			// Send Data To Client
			socket.emit('getGroupInv', { groupId: players[socket.id].groupId, sender: socket.id, receiver: playerInfo.sendTo, do: 1, senderName: players[socket.io].username });
			socket.broadcast.emit('getGroupInv', { groupId: players[socket.id].groupId, sender: socket.id, receiver: playerInfo.sendTo, do: 1, senderName: players[socket.io].username });

			// Reset players
			// Leader
			players[socket.id].inGroup = 0;
			players[socket.id].groupId = 0;

			// Other Player
			players[playerInfo.sendTo].inGroup = 0;
			players[playerInfo.sendTo].groupId = 0;
		}
		else
		{
			// Put player in group, at least temporarily
			players[socket.id].inGroup = 1;
			players[socket.id].groupId = groupIds;

			// Other Player
			players[playerInfo.sendTo].inGroup = 1;
			players[playerInfo.sendTo].groupId = groupIds;

			// Send Data To Client
			socket.emit('getGroupInv', { groupId: groupIds, sender: socket.id, receiver: playerInfo.sendTo, do: 0, senderName: players[socket.id].username });
			socket.broadcast.emit('getGroupInv', { groupId: groupIds, sender: socket.id, receiver: playerInfo.sendTo, do: 0, senderName: players[socket.id].username });

			// Increment group ids
			groupIds++;
		}
	});

	// When a player accepts or denies a group invite
	socket.on('confirmGroupInv', function(data)
	{
		// Prevents someone without a group invite, from confirming a group invite
		if(players[socket.id].inGroup == 0) return;

		if(data.answer)
		{
			// Place player in the group
			players[socket.id].inGroup = 3;

			// Make the main player who started the group the leader
			players[data.sender].inGroup = 4;
		}
		else
		{
			// Reset players
			// Leader
			players[socket.id].inGroup = 0;
			players[socket.id].groupId = 0;

			// Other Player
			players[data.sender].inGroup = 0;
			players[data.sender].groupId = 0;
		}
	});
	
	// When a player shoots, update the player bullet
	socket.on('bullet', function(data)
	{
		if(players[socket.id] == undefined) return;
		// Prevent multuple shots
		var now = new Date().getTime();
		if(now < players[socket.id].lastBulletShot) return;
		// Prevent zombies from shooting
		if(players[socket.id].isZombie > 0) return;
		// Continue
		// Reset
		players[socket.id].lastBulletShot = now + 500;
		// Bullet Code
		var new_bullet = data;
		data.owner_id = socket.id;
		bullet_array.push(new_bullet);
	});

	// When a player shoots, update the player bullet
	socket.on('createUser', function(data)
	{
		// Print To Console
		console.log(data.username + " has joined the game.");

		var now = new Date().getTime();

		// create a new player and add it to our players object
		players[socket.id] = {
			x: 630,
			y: 279,
			rotation: 0,
			playerId: socket.id,
			health: 100,
			justAttacked: false,
			health: 100,
			hunger: 100,
			thirst: 100,
			xp: 0,
			isZombie: 0,
			inGroup: 0,
			groupId: 0,
			money: 1000,
			username: data.username,
			lastBulletShot: now + 500,
			missionId: 0,
			missionStatus: 0,
			zombieTimer: now,
			lastActive: now,
			ownsHome: 0,
			isMoving: false,
			isShooting: false
		};

		// Send the players object to the new player
		socket.emit('currentPlayers', players);

		// Update all other players of the new player
		socket.broadcast.emit('newPlayer', players[socket.id]);
	});
	
	// When a player loads a map
	socket.on('mapInfo', function(data)
	{
		if(players[socket.id] == undefined) return;
		console.log(data);
				
		/*for(i = 0; i <= data.data.length; i++)
		{
			switch(mapData[i])
			{
				case 0:
					matrix.push(1);
				break;
				
				case 1:
					matrix.push(0);
				break;
				
				case 100:
					matrix.push(1);
				break;
			}
		}*/			
	});
});

// Update the bullets 60 times per frame and send updates 
function ServerGameLoop()
{
	// NPC Bullets
	for(var i = 0; i < npc_bullets.length; i++)
	{
		var bullet = npc_bullets[i];
		bullet.y += Math.sin(npc_bullets[i].angle * (Math.PI / 180)) * 2;
		bullet.x += Math.cos(npc_bullets[i].angle * (Math.PI / 180)) * 2;

		// Bullet hits object check
		if(map[Math.floor(bullet.x/64) + (Math.floor(bullet.y/64) * 100)] == 1)
		{
			npc_bullets.splice(i, 1);
			i--;
		}

		// Remove if it goes too far off screen 
		if(bullet.x < -10 || bullet.x > 10000 || bullet.y < -10 || bullet.y > 10000)
		{
			npc_bullets.splice(i, 1);
			i--;
		}
	}

	// Bullets
	for(var i = 0; i < bullet_array.length; i++)
	{
		var bullet = bullet_array[i];
		bullet.y += Math.sin(bullet_array[i].angle * (Math.PI / 180)) * 2;
		bullet.x += Math.cos(bullet_array[i].angle * (Math.PI / 180)) * 2;
		
		// Check if this bullet is close enough to hit any player 
		for(var playerId in players)
		{
			if(bullet.owner_id != playerId)
			{
				// And your own bullet shouldn't kill you
				var dx = players[playerId].x - bullet.x; 
				var dy = players[playerId].y - bullet.y;
				var dist = Math.sqrt(dx * dx + dy * dy);
				
				// Determine distance
				if(dist < 70)
				{
					// Group Code For PvP
					if(players[bullet.owner_id].groupId == players[playerId].groupId && players[bullet.owner_id].inGroup > 0 && players[playerId].inGroup > 0)
					{
						// Tell everyone this bullet got used
						bullet_array.splice(i, 1);
						i--;
					}
					else
					{
						Object.keys(players).forEach(function(id)
						{
							// Give XP
							if(players[bullet.owner_id].groupId == players[id].groupId && players[bullet.owner_id].inGroup > 0 && players[id].inGroup > 0)
							{
								players[id].xp += 25;
							}
						});
						// End Group Code For PvP

						// Tell everyone this player got hit
						io.emit('player-hit', players[playerId]);
						// Tell everyone this bullet got used
						bullet_array.splice(i, 1);
						i--;
						// Damage player
						players[playerId].health -= 10;
					}

					// Collision detection with player zombie
					if(players[playerId].isZombie > 0)
					{
						players[playerId].health = 100;
						players[playerId].hunger = 100;
						players[playerId].thirst = 100;
						players[playerId].isZombie = 0;
						players[playerId].x = 630;
						players[playerId].y = 279;
						io.emit('teleportMove', players[playerId]);
					}
				}
			}
		}

		// Bullet hits object check
		if(map[Math.floor(bullet.x/64) + (Math.floor(bullet.y/64) * 100)] == 1)
		{
			bullet_array.splice(i, 1);
			i--;
		}

		// Remove if it goes too far off screen 
		if(bullet.x < -10 || bullet.x > 10000 || bullet.y < -10 || bullet.y > 10000)
		{
			bullet_array.splice(i, 1);
			i--;
		}
	}

	// Objects / Players

	// Loop through players
	for(var playerId in players)
	{
		// Count objects player is on - prevents another object from overwriting that the player isn't on that object
		var onObject = 0;

		for(var i = 0; i < object_array.length; i++)
		{
			var dx = players[playerId].x - object_array[i].x; 
			var dy = players[playerId].y - object_array[i].y;
			var dist = Math.sqrt(dx * dx + dy * dy);
				
			// Determine distance
			if(dist < 70)
			{
				// Tell server player is indeed on an object
				onObject++;
			}
		}

		// Don't exceed values
		if(players[playerId].health > 100)
		{
			players[playerId].health = 100;
		}

		// Player Death
		if(players[playerId].health <= 0)
		{
			if(players[playerId].isZombie == 0)
			{
				// Set player to zombie
				players[playerId].isZombie = 1;

				// Set zombie timer
				var now = new Date().getTime();
				players[playerId].zombieTimer = now + 30000; 
			}
			players[playerId].health = 0;
		}

		if(players[playerId].hunger > 100)
		{
			players[playerId].hunger = 100;
		}

		if(players[playerId].thirst > 100)
		{
			players[playerId].thirst = 100;
		}

		// Zombie Timer
		if(players[playerId].isZombie > 0)
		{
			// Check timer
			var now = new Date().getTime();

			if(now > players[playerId].zombieTimer)
			{
				// Reset
				players[playerId].health = 100;
				players[playerId].hunger = 100;
				players[playerId].thirst = 100;
				players[playerId].isZombie = 0;
				players[playerId].x = 630;
				players[playerId].y = 279;
				io.emit('teleportMove', players[playerId]);
			}
		}

		// Mission Code
		// Mission #1 Finish
		if(players[playerId].missionId == 1 && players[playerId].missionStatus >= 2)
		{
			// Give rewards
			players[playerId].money += 500;
			players[playerId].xp += 1000;

			// Reset
			players[playerId].missionId = 0;
			players[playerId].missionStatus = 0;
			
			// Tell client that player finished a mission
			io.emit('mission-finish', players[playerId]);
		}

		// What homes do players own?
		var ownedHomes = [];

		// Loop through players for collision detection with other players
		Object.keys(players).forEach(function(id)
		{
			// If not the same player && is a zombie
			if(players[id].playerId != players[playerId].playerId && players[playerId].isZombie > 0)
			{
				var dx = players[playerId].x - players[id].x; 
				var dy = players[playerId].y - players[id].y;
				var dist = Math.sqrt(dx * dx + dy * dy);
					
				// Determine distance
				if(dist < 70)
				{
					// Take away health
					players[id].health -= 10;
				}
			}

			// Put owned homes in array
			ownedHomes.push(players[id].ownsHome);
		});

		// Was a home hit?
		var homeHit = false;
		// What's the home ID?
		var homeId = 0;
		var homeIdCount = 1;

		// Check if on house array
		for(var i = 0; i < home_array.length; i += 4)
		{
			if(players[playerId].x > home_array[i] && players[playerId].x < home_array[i + 2] && players[playerId].y > home_array[i + 1] && players[playerId].y < home_array[i + 3])
			{
				homeHit = true;
				homeId = homeIdCount;
				homeIdCount++;
			}
		}

		// Notify server if player isn't a zombie
		if(players[playerId].isZombie == 0)
		{
			if(onObject > 0)
			{
				// Tell client that player is on an object
				io.emit('player-on-object', { player: players[playerId], home: 0 });
			}
			else
			{
				if(homeHit && players[playerId].ownsHome == 0 && !ownedHomes.includes(homeId))
				{
					// Tell client that player is on an object
					io.emit('player-on-object', { player: players[playerId], home: homeId });
				}
				else
				{
					// Tell client that player is off on an object
					io.emit('player-off-object', players[playerId]);
				}
			}
		}
		else
		{
			// Fixes a bug, we still need to send data to a zombie
			io.emit('player-off-object', players[playerId]);
		}
	}
		
	// Zombies
	
	for(var i = 0; i < zombie_array.length; i++)
	{
		// Fixes a bug where it would cause game to crash and repeat inside the dist if check
		if(zombie_array[i] != undefined)
		{
			var zombie = zombie_array[i];
			var followPlayerX = 0;
			var followPlayerY = 0;
			var getPlayerX = 0;
			var getPlayerY = 0;
			var playerDetected = false;
			var myMap = zombie_array[i].myMap;
			var myMapCoords = zombie_array[i].myMapCoords;

			// Check if this bullet is close enough to hit any player 
			for(var playerId in players)
			{
				// And your own bullet shouldn't kill you
				var dx = players[playerId].x - zombie_array[i].x; 
				var dy = players[playerId].y - zombie_array[i].y;
				var dist = Math.sqrt(dx * dx + dy * dy);

				// Rotate towards player, if following a player
				if(zombie_array[i].isFollowingPlayer == players[playerId])
				{
					// Calculate angle
					var angle = Math.atan2(players[playerId].y - zombie_array[i].y, players[playerId].x - zombie_array[i].x);
					angle = (360 / (2 * Math.PI)) * angle;

					// If less than 0, add 360
					if(angle < 0)
					{
						angle += 360;
					}

					// Adjust rotation, may need to be changed for other sprites
					angle -= 90;

					// Set
					zombie_array[i].angle = angle;
				}
				
				// Determine distance
				if(dist < 160000 && zombie_array[i].path.length == 0 && players[playerId].isZombie == 0)
				{
					followPlayerX = players[playerId].x;
					followPlayerY = players[playerId].y;

					var zombieCoords = [(zombie_array[i].x - 640), (zombie_array[i].x + 640), (zombie_array[i].y - 640), (zombie_array[i].y + 640)];
					getPlayerX = Math.floor((followPlayerX - zombieCoords[0])/64);
					getPlayerY = Math.floor((followPlayerY - zombieCoords[2])/64);

					if(getPlayerX < 0 || getPlayerX > 20 || getPlayerY < 0 || getPlayerY > 20)
					{
						zombie_array[i].isFollowingPlayer = false;
					}
					else
					{
						zombie_array[i].isFollowingPlayer = players[playerId];
						playerDetected = true;
					}

					// Do damage to the player if the zombie touches them
					if(dist < 70)
					{
						// If wasn't just attacked...
						if(!players[playerId].justAttacked)
						{
							// Damage player
							players[playerId].health -= 10;
							// Set justAttacked
							players[playerId].justAttacked = true;
							// Alert all players
							io.emit('player-hit', players[playerId]);
						}
					}
				}
			}

			// Is following a player, lets do something about that
			if(zombie_array[i].isFollowingPlayer != false)
			{
				// If player is a zombie, stop following ther player
				if(zombie_array[i].isFollowingPlayer.health <= 0)
				{
					zombie_array[i].path = [];
					zombie_array[i].isFollowingPlayer = false;
					zombie_array[i].pathI = 0;
				}

				// No path defined, so lets figure this out
				if(zombie_array[i].path.length == 0)
				{	
					// For looping though tiles around zombie
					var loopC = 0;

					// Clear variables
					zombie_array[i].myMap = [];
					zombie_array[i].myMapCoords = [];

					// Start loop through tiles around zombie and put them in an array
					for(y = -10; y < 10; y++)
					{
						zombie_array[i].myMap[loopC] = new Array();
						
						for(c = Math.floor((zombie_array[i].x/64) * 64) - 640; c < Math.floor((zombie_array[i].x/64) * 64) + 640; c += 64)
						{
							var yOffset = Math.floor(zombie_array[i].y/64) + (y);
							var getValue = (yOffset * 100) + ((Math.floor(c/64)));
							if(map[getValue] == undefined)
							{
								zombie_array[i].myMap[loopC].push(1);
							}
							else
							{
								zombie_array[i].myMap[loopC].push(map[getValue]);
							}
							// Fixes a bug by doing it this way - calculate the y value
							var calcBefore = parseInt(zombie_array[i].y) + (y * 64);
							zombie_array[i].myMapCoords.push(c + "," + calcBefore);
						}
						loopC++;
					}
								
					// Let's find a path for the zombie
		    		var grid = new PF.Grid(20, 20, zombie_array[i].myMap);
					var finder = new PF.AStarFinder({
    					allowDiagonal: true,
    					dontCrossCorners: true
					});

					// Just in case there is an exception
					try
					{
						if(playerDetected)
						{
							zombie_array[i].path = finder.findPath(10, 10, parseInt(getPlayerX), parseInt(getPlayerY), grid);
						}
					}
					catch(error)
					{
						// This failed, put some code here later. I think I had issues because The grid may be smaller than the check area
					}
				}
			}

			// Walk around randomly, if not following a player
			if(!zombie_array[i].isFollowingPlayer)
			{
				// No path defined, so lets figure this out
				if(zombie_array[i].path.length == 0)
				{	
					// For looping though tiles around zombie
					var loopC = 0;

					// Clear variables
					zombie_array[i].myMap = [];
					zombie_array[i].myMapCoords = [];

					// Start loop through tiles around zombie and put them in an array
					for(y = -10; y < 10; y++)
					{
						zombie_array[i].myMap[loopC] = new Array();
						
						for(c = Math.floor((zombie_array[i].x/64) * 64) - 640; c < Math.floor((zombie_array[i].x/64) * 64) + 640; c += 64)
						{
							var yOffset = Math.floor(zombie_array[i].y/64) + (y);
							var getValue = (yOffset * 100) + ((Math.floor(c/64)));
							if(map[getValue] == undefined)
							{
								zombie_array[i].myMap[loopC].push(1);
							}
							else
							{
								zombie_array[i].myMap[loopC].push(map[getValue]);
							}
							// Fixes a bug by doing it this way - calculate the y value
							var calcBefore = parseInt(zombie_array[i].y) + (y * 64);
							zombie_array[i].myMapCoords.push(c + "," + calcBefore);
						}
						loopC++;
					}

					// Let's find a path for the zombie
		    		var grid = new PF.Grid(20, 20, zombie_array[i].myMap);
					var finder = new PF.AStarFinder({
    					allowDiagonal: true,
    					dontCrossCorners: true
					});

					// Just in case there is an exception
					try
					{
						// Generate random coords
						var rX = Math.floor(Math.random() * 20);
						var rY = Math.floor(Math.random() * 20);
						// Get path
						zombie_array[i].path = finder.findPath(10, 10, rX, rY, grid);
					}
					catch(error)
					{
						// This failed, put some code here later. I think I had issues because The grid may be smaller than the check area
					}
				}

				// Rotate towards destination
				if(zombie_array[i].path.length > 0)
				{
					// get coord from path
					//var zArray = zombie_array[i].path[zombie_array[i].pathI];
					var zArray = zombie_array[i].path[zombie_array[i].path.length - 1];
					// Calculate which tile to travel to based on zombie path position (Subtract by 1 to move the zombie one tile to the left this prevents a bug where zombie walks on tile that they are not supposed to)
					var calcBeforeCoords = (zArray[0]) + ((zArray[1]) * 20);
					// Translate
					var getCoords = zombie_array[i].myMapCoords[calcBeforeCoords].split(',');
					// Calculate angle
					var angle2 = Math.atan2(parseInt(getCoords[1]) - zombie_array[i].y, parseInt(getCoords[0]) - zombie_array[i].x);
					// Get angle
					angle2 = (360 / (2 * Math.PI)) * angle2;

					// If less than 0, add 360
					if(angle2 < 0)
					{
						angle2 += 360;
					}

					// Adjust rotation, may need to be changed for other sprites
					angle2 -= 90;

					// Set angle
					zombie_array[i].angle = angle2;
				}
			}

			if(zombie_array[i].path.length > 0)
			{
				// Zombie path NPM cords
				var zArray = zombie_array[i].path[zombie_array[i].pathI];

				try
				{
					// Calculate which tile to travel to based on zombie path position (Subtract by 1 to move the zombie one tile to the left this prevents a bug where zombie walks on tile that they are not supposed to)
					var calcBeforeCoords = (zArray[0]) + ((zArray[1]) * 20);

					// Translate
					var getCoords = myMapCoords[calcBeforeCoords].split(',');
					var gX = parseInt(getCoords[0]);
					var gY = parseInt(getCoords[1]);

					// Prevent zombie from going out of bounds
					if(getCoords[0] < 0)
					{
						gX = 64;
					}

					if(getCoords[1] < 0)
					{
						gY = 64;
					}
					// End of Prevent zombie from going out of bounds

					// Let's check and see if the zombie moved
					var moved = 0;

					// Move zombie
					if(zombie_array[i].x < gX)
					{
						zombie_array[i].x++;
						moved++;
					}
					if(zombie_array[i].x > gX)
					{
						zombie_array[i].x--;
						moved++;
					}
					if(zombie_array[i].y > gY)
					{
						zombie_array[i].y--;
						moved++;
					}
					if(zombie_array[i].y < gY)
					{
						zombie_array[i].y++;
						moved++;
					}

					// Did not move, let's go to the next index
					if(moved == 0)
					{
						zombie_array[i].pathI++;
					}
					
					// If the path is too long, stop following the player
					if(zombie_array[i].pathI >= zombie_array[i].path.length)
					{
						zombie_array[i].path = [];
						zombie_array[i].isFollowingPlayer = false;
						zombie_array[i].pathI = 0;
					}

					// If player is a zombie, stop following ther player
					if(zombie_array[i].isFollowingPlayer.health <= 0)
					{
						zombie_array[i].path = [];
						zombie_array[i].isFollowingPlayer = false;
						zombie_array[i].pathI = 0;
					}
				}
				catch(error)
				{
					// Do nothing.
				}
			}
		
			// Loop through bullets
			for(var j = 0; j < bullet_array.length; j++)
			{
				var bullet = bullet_array[j];
				// Check if this bullet is close enough to hit any zombie 
				var dx = zombie.x - bullet.x; 
				var dy = zombie.y - bullet.y;
				var dist = Math.sqrt(dx * dx + dy * dy);
		
				// Determine distance
				if(dist < 70)
				{
					// Tell everyone this zombie got hit
					zombie_array.splice(i, 1);
					i--;

					// Add xp for all players in the group
					// Was this a group kill?
					var wasGroupKill = false;

					for(var playerId in players)
					{
						if(players[bullet_array[j].owner_id].groupId == players[playerId].groupId && players[bullet_array[j].owner_id].inGroup > 0 && players[playerId].inGroup > 0)
						{
							players[playerId].xp += 100;
							wasGroupKill = true;

							// Mission #1 Code
							if(players[bullet_array[j].owner_id].missionId == 1)
							{
								players[bullet_array[j].owner_id].missionStatus += 1;
							}
						}
					}

					// If this wasn't a group kill, give player XP
					if(!wasGroupKill)
					{
						players[bullet_array[j].owner_id].xp += 100;

						// Mission #1 Code
						if(players[bullet_array[j].owner_id].missionId == 1)
						{
							players[bullet_array[j].owner_id].missionStatus += 1;
						}
					}

					// Tell everyone this bullet got used
					bullet_array.splice(j, 1);
					j--;
					
					// Notify all players on server
					io.emit('zombie-hit', i + 1);
				}
			}

			// Loop through NPC bullets
			for(var j = 0; j < npc_bullets.length; j++)
			{
				var bullet = npc_bullets[j];
				// Check if this bullet is close enough to hit any zombie 
				var dx = zombie.x - npc_bullets[j].x; 
				var dy = zombie.y - npc_bullets[j].y;
				var dist = Math.sqrt(dx * dx + dy * dy);
		
				// Determine distance
				if(dist < 70)
				{
					// Tell everyone this zombie got hit
					zombie_array.splice(i, 1);
					i--;

					// Tell everyone this bullet got used
					npc_bullets.splice(j, 1);
					j--;
					
					// Notify all players on server
					io.emit('zombie-hit', i + 1);
				}
			}
		}
	}

	// NPCs
	
	for(var i = 0; i < npc_array.length; i++)
	{
		// Fixes a bug where it would cause game to crash and repeat inside the dist if check
		if(npc_array[i] != undefined)
		{
			var npc = npc_array[i];
			var myMap = npc_array[i].myMap;
			var myMapCoords = npc_array[i].myMapCoords;
			// Has the NPC shot at the zombie?
			var hasShot = false;
			// Did we find a player to look at?
			var lookingAtPlayer = false;

			// Check if this bullet is close enough to hit any player 
			for(var j = 0; j < zombie_array.length; j++)
			{
				// And your own bullet shouldn't kill you
				var dx = zombie_array[j].x - npc_array[i].x; 
				var dy = zombie_array[j].y - npc_array[i].y;
				var dist = Math.sqrt(dx * dx + dy * dy);

				// Rotate towards player, if following a player
				if(npc_array[i].isShooting == zombie_array[j].permId)
				{
					// The NPC has shot at a zombie
					hasShot = true;

					// Calculate angle
					var angle = Math.atan2(zombie_array[j].y - npc_array[i].y, zombie_array[j].x - npc_array[i].x);
					angle = (360 / (2 * Math.PI)) * angle;

					// If less than 0, add 360
					if(angle < 0)
					{
						angle += 360;
					}

					angle -= 90;

					// Set
					npc_array[i].angle = angle;

					// Zombie is close, shoot!
					if(dist < 200)
					{
						// Shoot bullets
						// Prevent multuple shots
						var now = new Date().getTime();
						if(now > npc_array[i].lastBulletShot)
						{
							// Reset
							npc_array[i].lastBulletShot = now + 500;
							// Bullet Code
							var data = {};
							data.id = npc_bullets.length - 1;
							data.spriteid = npc_bullets.length - 1;
							data.x = npc_array[i].x;
							data.y = npc_array[i].y;
							data.angle = npc_array[i].angle + 90;	// Add 90 for our NPC sprite
							var new_bullet = data;
							data.owner_id = -1;
							npc_bullets.push(new_bullet);
						}
					}
				}

				if(!npc_array[i].isShooting)
				{
					// Determine distance
					if(dist < 1000)
					{
						// Set which zombie we are going to shoot
						npc_array[i].isShooting = zombie_array[j].permId;
					}
				}
			}

			// The NPC hasn't shot
			if(!hasShot)
			{
				npc_array[i].isShooting = false;
			}

			// No zombies, go back to roaming
			if(zombie_array.length == 0)
			{
				npc_array[i].isShooting = false;
			}

			// Walk around randomly, if roam set to true
			if(npc_array[i].roam)
			{
				// No path defined, so lets figure this out
				if(npc_array[i].path.length == 0)
				{	
					// For looping though tiles around NPC
					var loopC = 0;

					// Clear variables
					npc_array[i].myMap = [];
					npc_array[i].myMapCoords = [];

					// Start loop through tiles around NPC and put them in an array
					for(y = -10; y < 10; y++)
					{
						npc_array[i].myMap[loopC] = new Array();
						
						for(c = Math.floor((npc_array[i].x/64) * 64) - 640; c < Math.floor((npc_array[i].x/64) * 64) + 640; c += 64)
						{
							var yOffset = Math.floor(npc_array[i].y/64) + (y);
							var getValue = (yOffset * 100) + ((Math.floor(c/64)));
							if(map[getValue] == undefined)
							{
								npc_array[i].myMap[loopC].push(1);
							}
							else
							{
								npc_array[i].myMap[loopC].push(map[getValue]);
							}
							// Fixes a bug by doing it this way - calculate the y value
							var calcBefore = parseInt(npc_array[i].y) + (y * 64);
							npc_array[i].myMapCoords.push(c + "," + calcBefore);
						}
						loopC++;
					}
								
					// Let's find a path for the NPC
		    		var grid = new PF.Grid(20, 20, npc_array[i].myMap);
					var finder = new PF.AStarFinder({
    					allowDiagonal: true,
    					dontCrossCorners: true
					});

					// Just in case there is an exception
					try
					{
						// Generate random coords
						var rX = Math.floor(Math.random() * 20);
						var rY = Math.floor(Math.random() * 20);
						// Get path
						npc_array[i].path = finder.findPath(10, 10, rX, rY, grid);
					}
					catch(error)
					{
						// This failed, put some code here later. I think I had issues because The grid may be smaller than the check area
					}
				}

				// Rotate towards destination
				if(npc_array[i].path.length > 0 && npc_array[i].isShooting == false)
				{
					// Get coord from path
					var zArray = npc_array[i].path[npc_array[i].path.length - 1];
					// Calculate which tile to travel to based on NPC path position (Subtract by 1 to move the NPC one tile to the left this prevents a bug where NPC walks on tile that they are not supposed to)
					var calcBeforeCoords = (zArray[0]) + ((zArray[1]) * 20);
					// Translate
					var getCoords = npc_array[i].myMapCoords[calcBeforeCoords].split(',');
					// Calculate angle
					var angle2 = Math.atan2(parseInt(getCoords[1]) - npc_array[i].y, parseInt(getCoords[0]) - npc_array[i].x);
					// Get angle
					angle2 = (360 / (2 * Math.PI)) * angle2;

					// If less than 0, add 360
					if(angle2 < 0)
					{
						angle2 += 360;
					}

					angle2 -= 90;

					// Set angle
					npc_array[i].angle = angle2;
				}
			}
			else
			{
				// Rotate towards player, if following a player
				if(npc_array[i].isShooting == false && !lookingAtPlayer)
				{
					for(playerId in players)
					{
						// And your own bullet shouldn't kill you
						var dx = players[playerId].x - npc_array[i].x; 
						var dy = players[playerId].y - npc_array[i].y;
						var dist = Math.sqrt(dx * dx + dy * dy);

						if(dist < 200)
						{
							// Calculate angle
							var angle = Math.atan2(players[playerId].y - npc_array[i].y, players[playerId].x - npc_array[i].x);
							angle = (360 / (2 * Math.PI)) * angle;

							// If less than 0, add 360
							if(angle < 0)
							{
								angle += 360;
							}

							angle -= 90;

							// Set
							npc_array[i].angle = angle;
							lookingAtPlayer = true;
						}
					}
				}
			}

			if(npc_array[i].path.length > 0)
			{
				// NPC path NPM cords
				var zArray = npc_array[i].path[npc_array[i].pathI];

				try
				{
					// Calculate which tile to travel to based on NPC path position (Subtract by 1 to move the NPC one tile to the left this prevents a bug where NPC walks on tile that they are not supposed to)
					var calcBeforeCoords = (zArray[0]) + ((zArray[1]) * 20);

					// Translate
					var getCoords = myMapCoords[calcBeforeCoords].split(',');
					var gX = parseInt(getCoords[0]);
					var gY = parseInt(getCoords[1]);

					// Prevent NPC from going out of bounds
					if(getCoords[0] < 0)
					{
						gX = 32;
					}

					if(getCoords[1] < 0)
					{
						gY = 32;
					}
					// End of Prevent NPC from going out of bounds

					// Let's check and see if the NPC moved
					var moved = 0;

					// Move NPC
					if(npc_array[i].x < gX)
					{
						npc_array[i].x++;
						moved++;
					}
					if(npc_array[i].x > gX)
					{
						npc_array[i].x--;
						moved++;
					}
					if(npc_array[i].y > gY)
					{
						npc_array[i].y--;
						moved++;
					}
					if(npc_array[i].y < gY)
					{
						npc_array[i].y++;
						moved++;
					}

					// Did not move, let's go to the next index
					if(moved == 0)
					{
						npc_array[i].pathI++;
					}

					// Reset path when done
					if(npc_array[i].pathI >= npc_array[i].path.length)
					{
						npc_array[i].path = [];
						npc_array[i].pathI = 0;
					}
				}
				catch(error)
				{
					// Do nothing.
				}
			}
		}
	}
	
	// Tell everyone where all the NPCs are by sending the whole array
	io.emit("npc", npc_array);
	// Tell everyone where all the zombies are by sending the whole array
	io.emit("zombie", zombie_array);
	// Tell everyone where all the bullets are by sending the whole array
	io.emit("bullet", bullet_array);
	// Tell everyone where all the NPC bullets are by sending the whole array
	io.emit("npcBullet", npc_bullets);
	// Tell everyone where all the objects are at
	io.emit("object", object_array);
}

// Spawn zombies
function spawnZombies(x, y)
{
	var data = {};
	data.spriteid = zombieCount;
	data.x = x;
	data.y = y;
	data.rotation = 0;
	data.angle = 0;
	data.isFollowingPlayer = false;
	data.path = [];
	data.pathI = 0;
	data.myMap = [];
	data.myMapCoords = [];
	data.startX = x;
	data.startY = y;
	data.permId = zombieCount;
	var new_zombie = data;
	zombie_array.push(new_zombie);
	// Tell everyone where all the bullets are by sending the whole array
	io.emit("zombie", zombie_array);
	zombieCount++;
}

// Spawn NPC
// id = identify what NPC this is, roam = true/false - is this NPC going to walk around, x = where to spawn NPC x coord, y = where to spawn NPC y coord
function spawnNPC(id, name, roam, x, y)
{
	var data = {};
	data.spriteid = id;
	data.x = x;
	data.y = y;
	data.rotation = 0;
	data.angle = 0;
	data.isShooting = false;
	data.path = [];
	data.pathI = 0;
	data.myMap = [];
	data.myMapCoords = [];
	data.startX = x;
	data.startY = y;
	data.roam = roam;
	data.name = name;
	var now = new Date().getTime();
	data.lastBulletShot = now + 500;
	var new_npc = data;
	npc_array.push(new_npc);
	// Tell everyone where all the bullets are by sending the whole array
	io.emit("npc", npc_array);
}

// Spawn objects
function spawnObjects()
{
	for(i = 0; i <= 20; i++)
	{
		var randomX = Math.floor(Math.random() * 1000);
		var randomY = Math.floor(Math.random() * 1000);

		var data = {};
		data.x = randomX;
		data.y = randomY;
		data.spriteid = object_array.length;
		data.itemType = 0;
		object_array.push(data);
	}

	// Tell the server
	io.emit("object", object_array);
}

// This function will reset any values that need to be rest on a timed interval
function resetVarCheck()
{
	// Vars for player
	for(var playerId in players)
	{
		if(players[playerId].justAttacked)
		{
			players[playerId].justAttacked = false;
		}
	}
}

// Corrects the ids in object array after deletion
function fixObjectArray(index)
{
	for(i = index; i < object_array.length; i++)
	{
		object_array[i].spriteid = object_array[i].spriteid - 1;
	}
}

function hungerThirstCheck()
{
	// Loop through players
	for(var playerId in players)
	{
		// Take away from the following values...
		if(players[playerId].hunger > 0)
		{
			players[playerId].hunger -= 1;
		}
		else
		{
			// When hunger is 0, start taking from health
			players[playerId].health -= 5;
		}

		if(players[playerId].thirst > 0)
		{
			players[playerId].thirst -= 1;
		}
		else
		{
			// When hunger is 0, start taking from health
			players[playerId].health -= 5;
		}
	}
}

// For display purposes at the moment
function spawnRandomZombies()
{
	spawnZombies(50, 100);
}
 
setInterval(ServerGameLoop, 16);
setInterval(resetVarCheck, 1000);
setInterval(hungerThirstCheck, 10000);
setInterval(ServerGameLoop, 16);
//setInterval(spawnRandomZombies, 60000);

spawnZombies(50, 100);
spawnZombies(50, 100);
spawnZombies(50, 100);
spawnZombies(50, 100);
spawnZombies(50, 100);
spawnObjects();
spawnNPC(0, "NPC", true, 300, 200);

server.listen(8081, function ()
{
	console.log(`Listening on ${server.address().port}`);
});